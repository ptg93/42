#!/bin/bash

__nc()      	{ echo -e "\033[0m"; }
_red()      	{ echo -ne "\033[31m""$1"$(__nc); }
_green()   		{ echo -ne "\033[32m""$1"$(__nc); }
_yellow()		{ echo -ne "\033[33m""$1"$(__nc); }
_yellow_bold()  { echo -ne "\033[1;33m""$1"$(__nc); }
_blue()     	{ echo -ne "\033[34m""$1"$(__nc); }
_magenta()     	{ echo -ne "\033[35m""$1"$(__nc); }
_cian()     	{ echo -ne "\033[36m""$1"$(__nc); }

info(){
	tput cnorm
	echo -e "
$(_magenta  "push_swap_guilletester "tester" Version 1.4 by gumoreno")


   Run your push_swap on multiple ramdom combinations of numbers and test its limits and if it sorts correctly.


   * How to use it:
	
	$(_yellow_bold "./push_swap_tester.sh") $(_yellow "<how many ramdom numbers> <number of iterations> [flags]")	
			
		--> example:  ./push_swap_tester.sh 500 30  -> 30 iterations of 500 ramdom numbers

	$(_yellow_bold "./push_swap_tester.sh") $(_yellow "--strict") 						
			
		--> special selection of push_swap destroyer 500 numbers combinations :)  
		            
			(try "$(_yellow_bold "./push_swap_tester.sh ") $(_yellow "--pepestrict [flags]") "if you can't waste time)

   * You can use the following flags:

	$(_yellow "--silent")  --> results will be shown at the end of the process

	$(_yellow "--log")	  --> over limit or unsorted combinations will be saved in folder ps_log/

	
   Enjoy it ;)

"
	exit 0
}

help(){
	echo -e "
$(_magenta  "push_swap_guilletester "tester" Version 1.4 by gumoreno")
	
	$(_yellow  "--help")
	"
	exit 1
}

print_to_overlimit_log()
{
	echo -e $NB_OP "operations on "$1" ramdom numbers  ("$(date "+%c")")\n   bash -->     ARG=\"""$ARG""\"; ./push_swap \$ARG | wc -l" >> ./ps_log/overlimit_combs_log.txt
	echo -e "   fish --> set ARG \"""$ARG""\"; ./push_swap \$ARG | wc -l\n" >> ./ps_log/overlimit_combs_log.txt
}

print_to_order_log()
{
	if [ "$op_sys" = "Darwin" ]; then
		echo -e "Unsorted combination on "$1" ramdom numbers  ("$(date "+%c")")\n   bash -->     ARG=\"""$ARG""\"; ./push_swap \$ARG | ./checker_Mac \$ARG" >> ./ps_log/unsorted_combs_log.txt
		echo -e "   fish --> set ARG \"""$ARG""\"; ./push_swap \$ARG | ./checker_Mac \$ARG\n" >> ./ps_log/unsorted_combs_log.txt
	elif [ "$op_sys" = "Linux" ]; then
		echo -e "Unsorted combination on "$1" ramdom numbers  ("$(date "+%c")")\n   bash -->     ARG=\"""$ARG""\"; ./push_swap \$ARG | ./checker_linux \$ARG" >> ./ps_log/unsorted_combs_log.txt
		echo -e "   fish --> set ARG \"""$ARG""\"; ./push_swap \$ARG | ./checker_linux \$ARG\n" >> ./ps_log/unsorted_combs_log.txt
	fi
}

select_strict_arg(){
	if [ $1 = 1 ]; then
		ARG="309 118 427 236 45 354 163 472 281 90 399 208 17 326 135 444 253 62 371 180 489 298 107 416 225 34 343 152 461 271 80 389 198 7 316 125 434 243 52 361 170 479 288 97 406 215 24 333 142 451 260 69 378 187 496 305 114 423 232 41 350 159 468 277 86 395 204 13 322 131 440 249 58 367 176 485 294 103 412 221 30 339 148 457 266 75 384 193 3 312 121 430 239 48 357 166 475 284 93 402 211 20 329 138 447 256 65 374 183 492 301 110 419 228 37 346 155 464 273 82 391 200 9 318 127 436 245 54 363 172 481 290 99 408 217 26 335 144 453 262 71 380 189 498 307 116 425 235 44 353 162 471 280 89 398 207 16 325 134 443 252 61 370 179 488 297 106 415 224 33 342 151 460 269 78 387 196 5 314 123 432 241 50 359 168 477 286 95 404 213 22 331 140 449 258 67 376 185 494 303 112 421 230 39 348 158 467 276 85 394 203 12 321 130 439 248 57 366 175 484 293 102 411 220 29 338 147 456 265 74 383 192 1 310 119 428 237 46 355 164 473 282 91 400 209 18 327 136 445 254 63 372 181 490 299 108 417 226 35 344 153 462 390 199 8 317 126 435 244 53 362 171 480 289 98 407 216 25 334 143 452 261 70 379 188 497 306 115 424 233 42 351 160 469 278 87 396 205 14 323 132 441 250 59 368 177 486 295 104 413 222 31 340 149 458 267 76 385 194 122 431 240 49 358 167 476 285 94 403 212 21 330 139 448 257 66 375 184 493 302 111 420 229 38 347 156 465 274 83 392 201 10 319 128 437 246 55 364 173 482 291 100 409 218 27 336 145 454 263 72 381 190 499 308 117 426 270 79 388 197 6 315 124 433 242 51 360 169 478 287 96 405 214 23 332 141 450 259 68 377 186 495 304 113 422 231 40 349 2 311 120 429 238 47 356 165 474 283 92 401 210 19 328 137 446 255 64 373 182 491 300 109 418 227 36 345 154 463 272 81 234 43 352 161 470 279 88 397 206 15 324 133 442 251 60 369 178 487 296 105 414 223 32 341 150 459 268 77 386 195 4 313 157 466 275 84 393 202 11 320 129 438 247 56 365 174 483 292 101 410 219 28 337 146 455 264 73 382 191 0 "
	elif [ $1 = 2 ]; then
		ARG="112 421 230 39 348 158 467 276 85 394 203 12 321 130 439 248 57 366 175 484 293 102 411 220 29 338 147 456 265 74 383 192 1 310 119 428 237 46 355 164 473 282 91 400 209 18 327 136 445 254 63 372 181 490 299 108 417 226 35 344 153 462 390 199 8 317 126 435 244 53 362 171 480 289 98 407 216 25 334 143 452 261 70 379 188 497 306 115 424 233 42 351 160 469 278 87 396 205 14 323 132 441 250 59 368 177 486 295 104 413 222 31 340 149 458 267 76 385 194 122 431 240 49 358 167 476 285 94 403 212 21 330 139 448 257 66 375 184 493 302 111 420 229 38 347 156 465 274 83 392 201 10 319 128 437 246 55 364 173 482 291 309 118 427 236 45 354 163 472 281 90 399 208 17 326 135 444 253 62 371 180 489 298 107 416 225 34 343 152 461 271 80 389 198 7 316 125 434 243 52 361 170 479 288 97 406 215 24 333 142 451 260 69 378 187 496 305 114 423 232 41 350 159 468 277 86 395 204 13 322 131 440 249 58 367 176 485 294 103 412 221 30 339 148 457 266 75 384 193 3 312 121 430 239 48 357 166 475 284 93 402 211 20 329 138 447 256 65 374 183 492 301 110 419 228 37 346 155 464 273 82 391 200 9 318 127 436 245 54 363 172 481 290 99 408 217 26 335 144 453 262 71 380 189 498 307 116 425 235 44 353 162 471 280 89 398 207 16 325 134 443 252 61 370 179 488 297 106 415 224 33 342 151 460 269 78 387 196 5 314 123 432 241 50 359 168 477 286 95 404 213 22 331 140 449 258 67 376 185 494 303 100 409 218 27 336 145 454 263 72 381 190 499 308 117 426 270 79 388 197 6 315 124 433 242 51 360 169 478 287 96 405 214 23 332 141 450 259 68 377 186 495 304 113 422 231 40 349 2 311 120 429 238 47 356 165 474 283 92 401 210 19 328 137 446 255 64 373 182 491 300 109 418 227 36 345 154 463 272 81 234 43 352 161 470 279 88 397 206 15 324 133 442 251 60 369 178 487 296 105 414 223 32 341 150 459 268 77 386 195 4 313 157 466 275 84 393 202 11 320 129 438 247 56 365 174 483 292 101 410 219 28 337 146 455 264 73 382 191 0 "
	elif [ $1 = 3 ]; then
		ARG="117 -31 -62 181 -180 242 -214 199 -111 172 -27 -138 -72 65 -108 -186 157 24 195 134 -37 235 -147 -102 -122 86 79 -218 246 -57 27 -175 -48 -129 0 -7 162 -209 -103 -227 159 -19 -146 -204 146 -114 -171 110 152 143 -149 -59 57 7 173 -105 8 93 69 247 74 192 68 48 -21 107 -164 -67 -51 -225 147 -179 177 -178 95 19 83 -109 -10 -43 -201 194 165 -24 122 230 -170 38 -60 49 -211 16 -249 -95 -217 30 71 -30 -245 123 56 -97 -73 222 -137 -166 120 -28 53 28 -124 111 -148 33 130 82 -188 -199 216 -183 -235 232 42 -210 -155 109 -92 -83 -58 -152 -35 -121 52 -154 140 -240 -75 -118 -238 248 10 227 218 121 44 85 75 -52 -53 73 -136 153 29 161 12 214 92 -40 -90 202 -69 -130 -106 6 -141 -77 76 129 -96 236 -223 -107 220 70 -94 101 -246 -135 -12 -165 -6 -220 50 -8 -159 11 -120 -143 -239 -248 -182 -139 203 62 178 32 179 238 1 241 87 -38 -181 168 -167 15 -185 137 47 -85 -9 -56 54 135 149 -231 197 105 -232 -41 60 37 81 -215 66 -123 -236 -151 -64 217 -208 233 58 -192 51 219 -228 -194 -98 234 -14 -91 -131 249 191 210 245 167 -100 -29 138 -44 180 -112 -49 114 175 -221 133 -203 39 131 -4 163 -216 -205 -145 200 3 154 80 -134 118 -33 -68 -196 -50 231 243 144 -81 -101 -32 174 -219 145 -36 124 -160 -34 112 155 -25 -11 -115 119 185 -161 104 228 -229 -45 -23 -177 88 211 26 -172 207 -132 -88 -213 -242 -117 43 102 126 -162 21 -78 193 125 -93 -54 -241 171 -55 -39 14 -47 -250 22 151 -224 -212 169 115 -202 -200 -169 209 201 -79 240 205 -99 237 9 -158 198 -163 229 59 -116 2 89 -3 63 106 -119 132 128 188 -144 -104 98 -61 148 46 -15 -128 225 -206 -16 17 223 35 -197 -156 99 55 -63 -66 36 -184 67 -125 224 183 141 -65 -190 160 158 -80 94 -150 -5 -168 13 -110 136 100 156 4 239 -1 -127 139 -176 -87 113 -46 -22 176 221 212 150 170 -113 -20 -82 -71 -126 -74 34 -226 40 208 244 -133 127 91 213 187 -76 108 90 -234 -89 206 -84 64 -243 -244 96 190 -2 72 78 5 -140 -174 -233 142 -191 -70 -13 -153 84 -247 -237 45 186 25 116 77 226 166 -142 103 -222 215 97 -173 -18 -195 -193 164 -189 182 -207 -42 20 189 -26 41 -157 204 -17 31 -198 184 -187 196 61 23 18 -86 -230"
	elif [ $1 = 4 ]; then
		ARG="-724 -386 55 -978 -601 -790 738 -861 764 934 964 -193 397 -116 -607 105 -562 253 -249 -694 512 114 54 925 71 408 -491 -329 184 164 431 156 -700 622 -162 814 716 612 322 628 -438 782 -315 -214 927 460 336 753 -940 695 325 473 800 -998 412 414 -179 -38 -492 -353 -240 -63 -437 -943 724 405 651 678 -1 580 819 -463 -310 -967 67 -44 -327 427 -682 -406 -786 400 -690 -448 -534 -336 -117 -458 181 -976 -631 788 901 373 182 -288 60 760 -248 -236 873 -678 382 246 739 -552 615 -968 -576 -733 -31 876 -131 530 -540 -862 -754 -793 -393 -316 -207 571 131 -391 -901 -42 386 752 290 -446 -503 -772 331 765 -148 -980 -555 662 -189 -41 -499 -868 830 -273 -647 -654 -10 -605 516 656 737 439 197 -628 855 -677 -14 -388 -69 -617 -742 -828 22 -528 -615 -887 -280 235 -831 -721 317 101 914 242 534 -185 881 754 -128 -853 910 714 476 -618 -983 183 963 452 801 523 -584 -168 872 510 -798 -169 -996 -53 -415 989 -531 -914 -223 159 726 413 315 -948 783 980 -873 -735 -668 -135 820 602 572 -347 609 947 -929 204 53 817 668 -977 -587 607 912 857 -121 -593 642 -417 543 -170 -331 303 776 -794 887 -462 -403 -640 -840 546 749 236 893 266 -987 -253 99 -110 262 96 875 693 -418 423 327 -357 706 189 923 987 787 307 79 966 -763 -689 -932 -79 -854 541 -35 715 -475 659 162 -457 208 206 329 -442 264 -800 508 -67 851 391 302 409 962 268 -101 255 665 928 10 -893 -881 750 113 619 -580 595 -160 198 745 1000 557 -884 899 729 -182 59 163 -985 644 362 -513 -839 43 -784 -358 425 779 426 -731 711 -543 -622 655 -210 949 597 -542 -804 455 -411 -268 538 -104 -644 -489 -670 388 497 -119 529 -278 -691 134 -524 976 -692 424 816 -768 865 -588 249 -11 772 -525 623 -890 670 207 -241 997 271 -609 -194 15 -345 554 498 -198 -755 608 -237 410 357 84 -637 406 768 47 533 211 -833 859 123 332 33 -923 -919 667 -705 -829 -204 416 984 -811 -76 91 -319 -209 304 629 -514 986 466 133 -938 -23 828 -663 -439 352 -304 -974 -816 -326 -494 535 -757 905 367 40 744 353 -888 515 -958 278 111 710 472 -83 -500 -196 574 -916 970 669 -727 -537 -753 975 -21 617 -122 -819 699 227 610 982 -597 -660 882 -7 -779 284 -871 -220 180 176 346 -612 -982 9 -595 -470 -991 952 686 -453 1 -556 213 -955 170 -777 37 356 501 652 506 194 -559 -43 -416 -267 -399 306 292"
	elif [ $1 = 5 ]; then
		ARG="-73 -238 121 54 -35 53 -107 144 169 -233 118 60 92 7 -159 154 -177 -115 -139 -32 -24 235 -214 -200 -36 -18 -29 41 -75 -2 148 -184 115 -17 108 207 -137 -94 215 210 -246 165 -56 -8 140 78 -197 -235 -78 223 5 -63 33 -28 -167 96 184 131 -112 -70 -245 -242 224 -196 -102 -188 14 -30 -148 -170 -68 197 173 128 230 -182 -229 167 -76 71 237 -50 -134 221 -48 191 94 123 226 159 104 -118 58 -39 -101 -145 -96 -4 -213 246 176 178 -58 -52 -72 19 175 -82 45 -51 -142 -163 225 -156 -175 72 -3 -227 -160 39 87 57 -168 -11 189 -1 -111 34 -124 -22 -192 185 -224 -37 109 146 -179 156 116 -97 229 -132 -10 119 -194 102 171 133 20 61 134 10 181 -172 15 -241 -217 -16 206 70 127 243 -89 155 244 208 -154 -183 -161 174 -54 -162 -222 89 112 188 -59 228 23 186 129 -174 -57 242 170 -123 -199 -6 -27 -38 -138 -40 200 42 -178 -45 -140 66 -7 -219 -135 135 -84 101 48 -225 93 -157 152 -130 84 -92 232 -61 -209 -153 -126 21 124 194 -206 -204 24 69 44 -2147483648 -98 190 209 149 35 -85 105 -108 16 -189 -104 -155 -133 204 -77 -195 142 -41 -116 113 240 59 168 172 80 136 -99 -26 163 247 213 -87 -79 -176 -119 -136 -44 -248 -5 -121 -53 36 29 -215 -187 218 -207 81 -216 201 -147 117 -146 -33 67 -190 -93 37 -144 205 -9 46 82 231 130 100 -12 180 -221 214 -120 32 99 -31 138 -105 -198 162 2147483647 196 233 -166 1 -169 -131 98 63 -239 75 147 -46 -91 77 22 -186 -129 6 -74 -243 245 -152 0 126 26 -240 211 151 -226 -220 50 64 -202 2 -122 91 111 202 -109 3 -164 51 49 -143 203 199 -100 166 -237 187 74 -88 -117 227 -90 217 238 -203 -191 56 139 -218 -47 -15 9 73 -83 -125 -23 220 132 157 18 -80 -65 2034567890 62 40 -128 -95 182 -223 183 -212 4 -158 88 219 -230 17 13 -210 -234 158 -151 -21 55 12 -141 -34 -232 -71 -165 -106 8 239 122 -103 179 141 -180 -244 107 212 -231 -193 153 192 164 216 114 106 -66 -19 -25 -127 43 85 -49 11 -181 103 -67 -43 30 137 -113 120 -2034567890 -14 25 -171 -69 79 -201 86 161 -236 90 -13 193 -42 236 -114 177 222 -149 234 145 -55 31 -208 -228 68 -60 -64 195 -185 65 47 198 97 -211 38 125 -205 -81 -62 52 83 95 241 27 110 160 -247 -150 -86 76 -20 -110 143 28 -173 150"
	fi
}

header(){
	if [[ $i != 1 && $visual = true ]]; then
		echo -ne "\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A"
	fi
	if [[ "$1" = "--strict" || "$1" = "--pepestrict" ]]; then
		echo -ne "\r"$i"/"$i_max" - "$COMB_NB "strict numbers"
	else
		echo -ne "\r"$i"/"$i_max" - "$COMB_NB "random numbers"
	fi
		if [[ $i != 1 && $visual = true ]]; then
		echo -e "\n\n\n\n\n\n\n\n\n\n"
	fi
}

print_results(){
	echo -e "\r\n    MAX of operations:\t"$MAX_NB_OP"    "
	echo -e "\r\n    MIN of operations:\t"$MIN_NB_OP"    "
	echo -e "\r\n    Average:\t\t"$(($NB_OP_ACUM/$i))    "\n"
	if [ $NB_OP_LIMIT != 2147483647 ]; then
		echo -e "\r\n    Over limit (>$NB_OP_LIMIT): "$(($OVERLIMIT_NB))  "\n"
	else 
		echo -e "\r\n\n"
	fi
	if [[ $OVERLIMIT_NB -ge 1 && $log = true ]];then
		echo -ne "\033[1A\033[1A"
		echo -e "\r\t\t\t\t---> saved in ps_log/\n"
	fi
	if [[ $OVERLIMIT_NB -ge 1 ]];then
		echo -ne "\033[1A\033[1A"$(_red " ✘ ")"\n\n"
	fi
	if [[ $OVERLIMIT_NB = 0 && $i = $i_max && $NB_OP_LIMIT != 2147483647 ]];then
		echo -ne "\033[1A\033[1A"$(_green " ✔ ")"\n\n"
	fi
	if [[ $order_failed -ge 1 && $log = false ]]; then
		echo -e "\n\r\033[1A"$(_red " ✘ ")" Order: $order_failed failed\033[1A"
	elif [[ $order_failed -ge 1 && $log = true ]]; then
		echo -e "\n\r\033[1A"$(_red " ✘ ")" Order: $order_failed failed  \t\t---> saved in ps_log/\033[1A"
	elif [[ $order_failed = 0 && $i = $i_max ]]; then
		echo -e "\n\r\033[1A"$(_green " ✔ ")" Order: OK  ""\033[1A"
	fi
}

results(){

	if [ $visual = false ]; then
		echo -e "\n"
		print_results
	else
		if [ "$1" = "empty" ]; then
			echo -e "\r\n\n    MAX of operations:\t--"
			echo -e "\r\n    MIN of operations:\t--"
			echo -e "\r\n    Average:\t\t--\n"
			if [ $NB_OP_LIMIT != 2147483647 ]; then
				echo -e "\r\n    Over limit (>$NB_OP_LIMIT): --\n"
			else
				echo -e "\r\n\n"
			fi
			echo -ne "\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A"
		else
			if [ $i != "1" ]; then
				echo -ne "\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A"
			fi
		echo -ne "\n"
		print_results
		fi
	fi
}

completed(){
	if [ $visual = true ]; then
		echo -ne "\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A"
	else
		echo -ne "\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A"
	fi
	echo -e "\r       "$(_blue "* completed *")"\n\n"
	if [ $visual = true ]; then
		echo -e "\n\n\n\n\n\n\n\n\n\n\n\n"
	else
		echo -e "\n\n\n\n\n\n\n\n\n\n\n\n\n"
	fi
}

interrupted(){
	if [ $visual = true ]; then
		echo -ne "\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A"
	else
		echo -ne "\033[1A\033[1A"
	fi
	echo -e "\r   "$(_red "* process interrupted *")"\n\n"
	if [ $visual = true ]; then
		echo -e "\n\n\n\n\n\n\n\n\n"
	else
		echo -e "\033[1A\033[1A"
	fi
	results
	echo -e "\n\n"
	exit 1
}

error_clear(){
	
	echo -ne "\033[1A\033[1A"
	echo -e "\r                          "
	echo -e "\r                          "
	echo -e "\r                          "
	echo -e "\r                          "
	echo -e "\r                          "
	echo -e "\r                          "
	echo -e "\r                          "
	echo -e "\r                          "
	echo -e "\r                          "
	echo -e "\r                          "
	echo -e "\r                          "
	echo -e "\r                          "
	echo -e "\r                          "
	echo -ne "\033[1A\\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A\033[1A"
}

handle_exec(){
	if [ ! -r ../push_swap ]; then
		if [ ! -r ../Makefile ]; then
			echo -e "\n your Makefile is missing...\n"
			exit 1
		fi
		tput civis
		echo -e "\n  executing your Makefile..."
		echo -e "\033[1A\033[1A"
		make -C ../ re > /dev/null
		echo -e "          ready!!               "
		sleep 1
		echo -e "\033[1A\033[1A\033[1A"
	else
		make -C ../ > /dev/null
	fi
	$(mkdir -p ./temp)
	$(cp ../push_swap ./temp/)
	chmod 777 ./temp/push_swap
	chmod 777 ./src/checker_linux
	chmod 777 ./src/checker_Mac
}

parsing(){
	if [ "$1" = "--help" ]; then
		info
		exit 0
	fi
	if ! [[ ("$1" =~ ^[0-9]+$ && "$2" =~ ^[0-9]+$) || "$1" = "--strict" || "$1" = "--pepestrict" ]]; then
		help
	fi

	if ! [[ ("$1" =~ ^[0-9]+$ && "$2" =~ ^[0-9]+$) || "$2" = "--silent" || "$2" = "--log" || -z "$2" ]]; then
		help
	fi
	if [ -n "$2" ]; then
		if ! [[ ("$3" = "--silent" || "$3" = "--log"  || -z "$3" )]]; then
			help
		fi
		if [ "$2" == "$3" ];then
			help
		fi
	fi
	if [ -n "$3" ]; then
		if ! [[ ("$4" = "--silent" || "$4" = "--log"  || -z "$4" )]]; then
			help
		fi
		if [[ "$3" == "$4" || "$2" == "$4" ]];then
			help
		fi
	fi
	if [ -n "$5" ]; then
		help
	fi
}

init(){
	i=1
	if [ "$1" = "--strict" ]; then
		i_max=5;
		COMB_NB=500
	elif [ "$1" = "--pepestrict" ]; then
		i_max=1;
		COMB_NB=500
	else
		i_max="$2"
		COMB_NB="$1"
	fi
	MAX_NB_OP=0
	MIN_NB_OP=-1
	NB_OP_ACUM=0
	OVERLIMIT_NB=0
	if [[ $COMB_NB = 500 ]]; then
		NB_OP_LIMIT=5500
	elif [ $COMB_NB = 100 ]; then
		NB_OP_LIMIT=700
	elif [ $COMB_NB = 5 ]; then
		NB_OP_LIMIT=12	
	elif [ $COMB_NB = 3 ]; then
		NB_OP_LIMIT=3
	else
		NB_OP_LIMIT=2147483647
	fi
	visual=true
	if [[ "$2" = "--silent" || "$3" = "--silent" || "$4" = "--silent" ]]; then
			visual=false
		fi
	log=false
	if [[ "$2" = "--log" || "$3" = "--log" || "$4" = "--log" ]]; then
			log=true
		fi
	order_failed=0;
	op_sys=$(uname)
	mkdir -p ps_log/
	tput civis
	trap 'tput cnorm; rm -r temp; exit' INT TERM EXIT
	trap 'interrupted' INT TERM
}

parsing "$@"
handle_exec
init "$@"
echo -e "\nprocessing...         \n"
if [ $visual = true ]; then
	results empty
fi
while [ $i -le $i_max ];
do
	header "$@"
	if [[ "$1" = "--strict" || "$1" = "--pepestrict" ]]; then
		select_strict_arg $i
	else
		ARG=$(seq -1000 1000 | sort -R | head -n $COMB_NB | tr '\n' ' ')
	fi
	NB_OP=$("./temp/push_swap" "$ARG" 2> /dev/null | wc -l)
	if [ "$op_sys" = "Darwin" ]; then
		ORDER=$("./temp/push_swap" "$ARG" 2> /dev/null | ./src/checker_Mac "$ARG" 2> /dev/null)
	elif [ "$op_sys" = "Linux" ]; then
		ORDER=$("./temp/push_swap" "$ARG" 2> /dev/null  | ./src/checker_linux "$ARG" 2> /dev/null)
	fi
	if [ "$ORDER" = "KO" ]; then
		order_failed=$(($order_failed + 1))
		if [ $log = true ]; then
			print_to_order_log "$COMB_NB"
		fi
	elif [ "$ORDER" != "OK" ]; then
		error_clear
		echo -e "\n    Ooops... Error :( \n\n    Your push_swap probably does not handle the arguments correctly\n    or does not only print operations.\n "
		exit 1
	fi
	if [ $NB_OP -gt $MAX_NB_OP ]; then
		MAX_NB_OP=$NB_OP
	fi
	if [ $NB_OP -gt $NB_OP_LIMIT ];then
		OVERLIMIT_NB=$(($OVERLIMIT_NB + 1))
		if [ $log = true ]; then
			print_to_overlimit_log $COMB_NB
		fi
	fi
	if [[ $NB_OP -lt $MIN_NB_OP || $MIN_NB_OP = -1 ]]; then
		MIN_NB_OP=$NB_OP
	fi 
	NB_OP_ACUM=$(($NB_OP_ACUM + $NB_OP))
	if [ $visual = true ]; then
		results
	fi
	i=$(($i + 1))
done
if [ $visual = false ]; then
	i=$(($i - 1))
	results
fi
completed
exit 0
